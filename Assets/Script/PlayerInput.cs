//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Joueur"",
            ""id"": ""509cab34-050c-4624-ba0a-0e9efc72faf6"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""Value"",
                    ""id"": ""907b5566-1103-4644-92b4-620d597938ba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Parler"",
                    ""type"": ""Button"",
                    ""id"": ""eab4c5d6-cc1d-4de2-9beb-48387ca7742b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d4b1c7d0-2d65-4bb3-bacb-c125616a598d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangerDeForme"",
                    ""type"": ""Button"",
                    ""id"": ""49207e3c-84f4-4d07-9550-535f72943401"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""fleche"",
                    ""id"": ""657785a4-c487-4636-b3e4-39a4b9e9013e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8c7a658-5889-43c7-b7b9-27672efd995e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""35111502-97ec-415b-9151-6727cf033c88"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8082afbc-36a8-4e7a-b544-9cb5abeb97cf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d85c39bd-9127-420e-ac58-073ff8690d24"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ZQSD"",
                    ""id"": ""4aeacadf-6c1c-40a1-ab5c-e79e7714b678"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7cfafcf8-eadd-4678-b330-70118ff3e66f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a37b78d9-ba4b-4fed-8fe6-2aec2a40f54d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""39c43a4e-b83c-4288-8aa3-b524175656e1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7fa0f9ec-f361-48b0-8239-cb2b8fd4a8d7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""manette"",
                    ""id"": ""e0450cb3-f433-4d14-93bf-bba5919692e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""e640bed9-092c-4746-a765-6655a9d9d5c4"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""39ad12a1-967f-4daf-913b-c27d5cafd609"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""7836fc78-f97e-46d2-91d1-1ad376f907b1"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""4f3a7642-31af-46ec-a149-68ffecedbe53"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f900693d-9822-40c1-b8ca-b51bbe3fbac5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""CamRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cfbba6a-ce28-4037-bdf1-3c4a966c17b3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""CamRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1286458-3b2e-49db-b71a-86ab59ae3e1c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""ChangerDeForme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5f2d0ee-f288-457c-b52b-b794283f1a9d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""ChangerDeForme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0287ca1a-36af-4f4c-867a-8e5f71552580"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Parler"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddbff167-e1d2-4a5e-9501-bc42ac249b42"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Jeu"",
                    ""action"": ""Parler"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Jeu"",
            ""bindingGroup"": ""Jeu"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Joueur
        m_Joueur = asset.FindActionMap("Joueur", throwIfNotFound: true);
        m_Joueur_Mouvement = m_Joueur.FindAction("Mouvement", throwIfNotFound: true);
        m_Joueur_Parler = m_Joueur.FindAction("Parler", throwIfNotFound: true);
        m_Joueur_CamRotation = m_Joueur.FindAction("CamRotation", throwIfNotFound: true);
        m_Joueur_ChangerDeForme = m_Joueur.FindAction("ChangerDeForme", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Joueur
    private readonly InputActionMap m_Joueur;
    private List<IJoueurActions> m_JoueurActionsCallbackInterfaces = new List<IJoueurActions>();
    private readonly InputAction m_Joueur_Mouvement;
    private readonly InputAction m_Joueur_Parler;
    private readonly InputAction m_Joueur_CamRotation;
    private readonly InputAction m_Joueur_ChangerDeForme;
    public struct JoueurActions
    {
        private @PlayerInput m_Wrapper;
        public JoueurActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_Joueur_Mouvement;
        public InputAction @Parler => m_Wrapper.m_Joueur_Parler;
        public InputAction @CamRotation => m_Wrapper.m_Joueur_CamRotation;
        public InputAction @ChangerDeForme => m_Wrapper.m_Joueur_ChangerDeForme;
        public InputActionMap Get() { return m_Wrapper.m_Joueur; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoueurActions set) { return set.Get(); }
        public void AddCallbacks(IJoueurActions instance)
        {
            if (instance == null || m_Wrapper.m_JoueurActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoueurActionsCallbackInterfaces.Add(instance);
            @Mouvement.started += instance.OnMouvement;
            @Mouvement.performed += instance.OnMouvement;
            @Mouvement.canceled += instance.OnMouvement;
            @Parler.started += instance.OnParler;
            @Parler.performed += instance.OnParler;
            @Parler.canceled += instance.OnParler;
            @CamRotation.started += instance.OnCamRotation;
            @CamRotation.performed += instance.OnCamRotation;
            @CamRotation.canceled += instance.OnCamRotation;
            @ChangerDeForme.started += instance.OnChangerDeForme;
            @ChangerDeForme.performed += instance.OnChangerDeForme;
            @ChangerDeForme.canceled += instance.OnChangerDeForme;
        }

        private void UnregisterCallbacks(IJoueurActions instance)
        {
            @Mouvement.started -= instance.OnMouvement;
            @Mouvement.performed -= instance.OnMouvement;
            @Mouvement.canceled -= instance.OnMouvement;
            @Parler.started -= instance.OnParler;
            @Parler.performed -= instance.OnParler;
            @Parler.canceled -= instance.OnParler;
            @CamRotation.started -= instance.OnCamRotation;
            @CamRotation.performed -= instance.OnCamRotation;
            @CamRotation.canceled -= instance.OnCamRotation;
            @ChangerDeForme.started -= instance.OnChangerDeForme;
            @ChangerDeForme.performed -= instance.OnChangerDeForme;
            @ChangerDeForme.canceled -= instance.OnChangerDeForme;
        }

        public void RemoveCallbacks(IJoueurActions instance)
        {
            if (m_Wrapper.m_JoueurActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoueurActions instance)
        {
            foreach (var item in m_Wrapper.m_JoueurActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoueurActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoueurActions @Joueur => new JoueurActions(this);
    private int m_JeuSchemeIndex = -1;
    public InputControlScheme JeuScheme
    {
        get
        {
            if (m_JeuSchemeIndex == -1) m_JeuSchemeIndex = asset.FindControlSchemeIndex("Jeu");
            return asset.controlSchemes[m_JeuSchemeIndex];
        }
    }
    public interface IJoueurActions
    {
        void OnMouvement(InputAction.CallbackContext context);
        void OnParler(InputAction.CallbackContext context);
        void OnCamRotation(InputAction.CallbackContext context);
        void OnChangerDeForme(InputAction.CallbackContext context);
    }
}
